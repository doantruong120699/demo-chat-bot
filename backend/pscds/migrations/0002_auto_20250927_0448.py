# Generated by Django 5.2.6 on 2025-09-27 04:48

from django.db import migrations
from django.utils import timezone
from datetime import date, timedelta, datetime


def create_initial_data(apps, schema_editor):
    User = apps.get_model("pscds", "User")
    Project = apps.get_model("pscds", "Project")
    Priority = apps.get_model("pscds", "Priority")
    Task = apps.get_model("pscds", "Task")
    TaskUser = apps.get_model("pscds", "TaskUser")
    TimeInterval = apps.get_model("pscds", "TimeInterval")
    Log = apps.get_model("pscds", "Log")
    Request = apps.get_model("pscds", "Request")
    Notification = apps.get_model("pscds", "Notification")
    ProjectUser = apps.get_model("pscds", "ProjectUser")
    WarningReport = apps.get_model("pscds", "WarningReport")
    Setting = apps.get_model("pscds", "Setting")

    # Create Priorities
    priorities = [
        {"name": "Low", "color": "#28a745"},
        {"name": "Medium", "color": "#ffc107"},
        {"name": "High", "color": "#fd7e14"},
        {"name": "Critical", "color": "#dc3545"},
    ]
    
    priority_objects = []
    for priority_data in priorities:
        priority = Priority.objects.create(**priority_data)
        priority_objects.append(priority)

    # Create Users
    users = [
        {
            "full_name": "Admin User",
            "email": "admin@pscd.com",
            "password": "hashed_password_admin",
            "role_id": 1,
            "timezone": "UTC",
            "user_language": "en",
            "active": True,
            "important": True,
        },
        {
            "full_name": "Đoàn Trường",
            "email": "doantruong@pscd.com",
            "password": "hashed_password_john",
            "role_id": 3,
            "timezone": "UTC",
            "user_language": "en",
            "phone": "+1234567890",
            "address": "03 Ngô Sỹ Liên, phường Hòa Khánh, thành phố Đà Nẵng",
            "active": True,
        },
        {
            "full_name": "Dương Quang Hải",
            "email": "duongquanghai@pscd.com",
            "password": "hashed_password_jane",
            "role_id": 2,
            "timezone": "UTC",
            "user_language": "en",
            "phone": "+1234567891",
            "address": "456 Oak Ave, City, Country",
            "active": True,
        },
        {
            "full_name": "Trương Nhất",
            "email": "truongnhat@pscd.com",
            "password": "hashed_password_mike",
            "role_id": 3,
            "timezone": "UTC",
            "user_language": "en",
            "active": True,
        },
        {
            "full_name": "Ngo Dai Viet",
            "email": "ngodaiviet@pscd.com",
            "password": "hashed_password_sarah",
            "role_id": 3,
            "timezone": "UTC",
            "user_language": "en",
            "active": True,
        },
        {
            "full_name": "Mai Hồ Xuân Tài",
            "email": "maihoxuan@pscd.com",
            "password": "hashed_password_sarah",
            "role_id": 3,
            "timezone": "UTC",
            "user_language": "en",
            "active": True,
        },
        {
            "full_name": "Phan Công Tài",
            "email": "phancongtai@pscd.com",
            "password": "hashed_password_sarah",
            "role_id": 3,
            "timezone": "UTC",
            "user_language": "en",
            "active": True,
        },
        {
            "full_name": "Nguyễn Thị Anh Thư",
            "email": "nguyenthianhthu@pscd.com",
            "password": "hashed_password_sarah",
            "role_id": 3,
            "timezone": "UTC",
            "user_language": "en",
            "active": True,
        },
    ]
    
    user_objects = []
    for user_data in users:
        user = User.objects.create(**user_data)
        user_objects.append(user)

    # Create Projects
    projects = [
        {
            "name": "AI Chat Application",
            "description": "Development of an AI-powered chat application with Django backend and React frontend",
            "start_date": date.today() - timedelta(days=30),
            "end_date": date.today() + timedelta(days=60),
            "status": 1,
            "company_id": 1,
            "default_priority_id": priority_objects[1].id,
        },
        {
            "name": "Mobile App Development",
            "description": "Cross-platform mobile application for project management",
            "start_date": date.today() - timedelta(days=15),
            "end_date": date.today() + timedelta(days=90),
            "status": 1,
            "company_id": 1,
            "default_priority_id": priority_objects[2].id,
        },
        {
            "name": "Tosi Grow Holding",
            "description": "Tosi Growth Holding (TGH) is a global digital financial platform designed to help users (called holders) manage, grow and increase assets through a transparent, automated and sustainable profit distribution mechanism.",
            "start_date": date.today() - timedelta(days=45),
            "end_date": date.today() + timedelta(days=30),
            "status": 2,
            "company_id": 1,
            "default_priority_id": priority_objects[1].id,
        },
        {
            "name": "Trí Tuệ Siêu Việt",
            "description": "Trí Tuệ Siêu Việt (TSV) là một công ty công nghệ và giáo dục đầu tiên tại Việt Nam, được thành lập vào năm 2018 với mục tiêu cung cấp giáo dục chất lượng và công nghệ tốt nhất cho các học sinh và sinh viên.",
            "start_date": date.today() - timedelta(days=45),
            "end_date": date.today() + timedelta(days=30),
            "status": 2,
            "company_id": 1,
            "default_priority_id": priority_objects[1].id,
        },
    ]
    
    project_objects = []
    for project_data in projects:
        project = Project.objects.create(**project_data)
        project_objects.append(project)

    # Create Project Users (assign users to projects)
    project_users = [
        # AI Chat Application
        {"user": user_objects[1], "project": project_objects[0], "role_id": 2},  # Doan Truong - Leader
        {"user": user_objects[2], "project": project_objects[0], "role_id": 3},  # Trương Nhất - Developer
        {"user": user_objects[3], "project": project_objects[0], "role_id": 4},  # Dương Quang Hải - Tester
        {"user": user_objects[4], "project": project_objects[0], "role_id": 5},  # Mai Hồ Xuân Tài - Designer
        {"user": user_objects[5], "project": project_objects[0], "role_id": 6},  # Phan Công Tài - Tester

        # Mobile App Development
        {"user": user_objects[2], "project": project_objects[1], "role_id": 2},  # Trương Nhất - Leader
        {"user": user_objects[4], "project": project_objects[1], "role_id": 3},  # Phan Công Tài - Developer
        {"user": user_objects[5], "project": project_objects[1], "role_id": 4},  # Mai Hồ Xuân Tài - Tester

        # Tosi Grow Holding
        {"user": user_objects[3], "project": project_objects[2], "role_id": 2},  # Dương Quang Hải - Leader
        {"user": user_objects[1], "project": project_objects[2], "role_id": 3},  # Doan Truong - Developer
        {"user": user_objects[5], "project": project_objects[2], "role_id": 4},  # Mai Hồ Xuân Tài - Tester
        {"user": user_objects[6], "project": project_objects[2], "role_id": 5},  # Nguyễn Thị Anh Thư - Designer

        # Trí Tuệ Siêu Việt
        {"user": user_objects[4], "project": project_objects[3], "role_id": 2},  # Phan Công Tài - Leader
        {"user": user_objects[2], "project": project_objects[3], "role_id": 3},  # Trương Nhất - Developer
        {"user": user_objects[3], "project": project_objects[3], "role_id": 4},  # Dương Quang Hải - Tester
        {"user": user_objects[6], "project": project_objects[3], "role_id": 5},  # Nguyễn Thị Anh Thư - Designer
    ]
    
    for project_user_data in project_users:
        ProjectUser.objects.create(**project_user_data)

    # Create Tasks
    tasks = [
        {
            "project": project_objects[0],
            "task_name": "Setup Django Backend",
            "description": "Initialize Django project, configure database, and setup basic models",
            "work_time": 8.5,
            "warning_time": 10.0,
            "status_id": 2,
            "priority": priority_objects[2],
            "due_date": timezone.now() + timedelta(days=3),
        },
        {
            "project": project_objects[0],
            "task_name": "Implement User Authentication",
            "description": "Create user registration, login, and authentication system",
            "work_time": 12.0,
            "warning_time": 15.0,
            "status_id": 1,
            "priority": priority_objects[2],
            "due_date": timezone.now() + timedelta(days=7),
        },
        {
            "project": project_objects[0],
            "task_name": "Design Chat Interface",
            "description": "Create responsive chat interface with React components",
            "work_time": 6.0,
            "warning_time": 8.0,
            "status_id": 0,
            "priority": priority_objects[1],
            "due_date": timezone.now() + timedelta(days=10),
        },
        {
            "project": project_objects[1],
            "task_name": "Mobile App Architecture",
            "description": "Design the overall architecture for the mobile application",
            "work_time": 4.0,
            "warning_time": 6.0,
            "status_id": 1,
            "priority": priority_objects[1],
            "due_date": timezone.now() + timedelta(days=5),
        },
        {
            "project": project_objects[2],
            "task_name": "UI/UX Design",
            "description": "Create mockups and wireframes for the new website design",
            "work_time": 16.0,
            "warning_time": 20.0,
            "status_id": 3,
            "priority": priority_objects[0],
            "due_date": timezone.now() - timedelta(days=2),
        },
        {
            "project": project_objects[3],
            "task_name": "Blockchain Development",
            "description": "Develop the blockchain infrastructure for the new website",
            "work_time": 16.0,
            "warning_time": 20.0,
            "status_id": 3,
            "priority": priority_objects[0],
            "due_date": timezone.now() + timedelta(days=10),
        },
    ]
    
    task_objects = []
    for task_data in tasks:
        task = Task.objects.create(**task_data)
        task_objects.append(task)

    # Create Task User assignments
    task_users = [
        {"task": task_objects[0], "user": user_objects[1]},
        {"task": task_objects[1], "user": user_objects[1]},
        {"task": task_objects[1], "user": user_objects[2]},
        {"task": task_objects[2], "user": user_objects[2]},
        {"task": task_objects[3], "user": user_objects[3]},
        {"task": task_objects[4], "user": user_objects[4]},
        {"task": task_objects[5], "user": user_objects[5]},
    ]
    
    for task_user_data in task_users:
        TaskUser.objects.create(**task_user_data)

    # Create Time Intervals
    time_intervals = [
        {
            "task": task_objects[0],
            "user": user_objects[1],
            "start_at": timezone.now() - timedelta(hours=4),
            "end_at": timezone.now() - timedelta(hours=2),
            "activity_fill": 85,
            "mouse_fill": 75,
            "keyboard_fill": 80,
            "job": "Backend setup and configuration",
            "status": 1,
        },
        {
            "task": task_objects[1],
            "user": user_objects[1],
            "start_at": timezone.now() - timedelta(hours=6),
            "end_at": timezone.now() - timedelta(hours=4),
            "activity_fill": 90,
            "mouse_fill": 85,
            "keyboard_fill": 95,
            "job": "Authentication system implementation",
            "status": 1,
        },
        {
            "task": task_objects[2],
            "user": user_objects[2],
            "start_at": timezone.now() - timedelta(hours=3),
            "end_at": timezone.now() - timedelta(hours=1),
            "activity_fill": 70,
            "mouse_fill": 80,
            "keyboard_fill": 65,
            "job": "React component development",
            "status": 1,
        },
    ]
    
    for interval_data in time_intervals:
        TimeInterval.objects.create(**interval_data)

    # Create Logs
    logs = [
        {
            "user": user_objects[1],
            "time": timezone.now() - timedelta(hours=2),
            "event": "User logged in",
            "sit": "WORK",
            "location": "Da Nang, Viet Nam",
            "os": "Windows 11",
            "note": "Started working on backend tasks",
        },
        {
            "user": user_objects[2],
            "time": timezone.now() - timedelta(hours=1),
            "event": "Task completed",
            "sit": "WORK",
            "location": "Da Nang, Viet Nam",
            "os": "macOS Ventura",
            "note": "Finished React component implementation",
        },
        {
            "user": user_objects[3],
            "time": timezone.now() - timedelta(minutes=30),
            "event": "Break started",
            "sit": "BREAK",
            "location": "Da Nang, Viet Nam",
            "os": "Ubuntu 22.04",
            "note": "Taking a scheduled break",
        },
        {
            "user": user_objects[4],
            "time": timezone.now() - timedelta(minutes=30),
            "event": "Break started",
            "sit": "BREAK",
            "location": "Da Nang, Viet Nam",
            "os": "Ubuntu 22.04",
            "note": "Taking a scheduled break",
        },
        {
            "user": user_objects[5],
            "time": timezone.now() - timedelta(minutes=30),
            "event": "Break started",
            "sit": "BREAK",
            "location": "Da Nang, Viet Nam",
            "os": "Ubuntu 22.04",
            "note": "Taking a scheduled break",
        },
    ]
    
    for log_data in logs:
        Log.objects.create(**log_data)

    # Create Requests
    requests = [
        {
            "user": user_objects[1],
            "datetime_start": timezone.make_aware(datetime(2025, 9, 27, 8, 0)),
            "datetime_end": timezone.make_aware(datetime(2025, 9, 27, 17, 0)),
            "reason": "Doctor appointment - medical leave",
            "status": 0,
        },
        {
            "user": user_objects[2],
            "datetime_start": timezone.make_aware(datetime(2025, 10, 1, 8, 0)),
            "datetime_end": timezone.make_aware(datetime(2025, 10, 1, 17, 0)),
            "reason": "Về quê ăn đám cưới",
            "status": 1,
        },
        {
            "user": user_objects[3],
            "datetime_start": timezone.make_aware(datetime(2025, 9, 25, 8, 0)),
            "datetime_end": timezone.make_aware(datetime(2025, 9, 25, 17, 0)),
            "reason": "Đi dân quân",
            "status": 0,
        },
        {
            "user": user_objects[5],
            "datetime_start": timezone.make_aware(datetime(2025, 10, 3, 8, 0)),
            "datetime_end": timezone.make_aware(datetime(2025, 10, 3, 17, 0)),
            "reason": "Đưa vợ đi khám bệnh",
            "status": 0,
        },
    ]
    
    for request_data in requests:
        Request.objects.create(**request_data)

    # Create Notifications
    notifications = [
        {
            "user": user_objects[1],
            "object_id": task_objects[0].id,
            "type": 1,
            "message": "New task assigned: Setup Django Backend",
            "is_seen": False,
            "status": "unread",
        },
        {
            "user": user_objects[2],
            "object_id": task_objects[2].id,
            "type": 1,
            "message": "Task deadline approaching: Design Chat Interface",
            "is_seen": False,
            "status": "unread",
        },
        {
            "user": user_objects[0],
            "object_id": project_objects[0].id,
            "type": 2,
            "message": "Project milestone reached: AI Chat Application",
            "is_seen": True,
            "status": "ready",
        },
    ]
    
    for notification_data in notifications:
        Notification.objects.create(**notification_data)

    # Create Warning Reports
    warning_reports = [
        {"report_id": 1001},
        {"report_id": 1002},
        {"report_id": 1003},
    ]
    
    for warning_data in warning_reports:
        WarningReport.objects.create(**warning_data)

    # Create Settings
    settings = [
        {"module_name": "authentication", "key": "session_timeout"},
        {"module_name": "authentication", "key": "password_complexity"},
        {"module_name": "monitoring", "key": "screenshot_interval"},
        {"module_name": "monitoring", "key": "activity_tracking"},
        {"module_name": "notifications", "key": "email_enabled"},
        {"module_name": "notifications", "key": "push_enabled"},
        {"module_name": "system", "key": "maintenance_mode"},
        {"module_name": "system", "key": "debug_level"},
    ]
    
    for setting_data in settings:
        Setting.objects.create(**setting_data)


def reverse_initial_data(apps, schema_editor):
    # Delete all data in reverse order to handle foreign key constraints
    Setting = apps.get_model("pscds", "Setting")
    WarningReport = apps.get_model("pscds", "WarningReport")
    Notification = apps.get_model("pscds", "Notification")
    Request = apps.get_model("pscds", "Request")
    Log = apps.get_model("pscds", "Log")
    TimeInterval = apps.get_model("pscds", "TimeInterval")
    TaskUser = apps.get_model("pscds", "TaskUser")
    Task = apps.get_model("pscds", "Task")
    ProjectUser = apps.get_model("pscds", "ProjectUser")
    Project = apps.get_model("pscds", "Project")
    User = apps.get_model("pscds", "User")
    Priority = apps.get_model("pscds", "Priority")

    Setting.objects.all().delete()
    WarningReport.objects.all().delete()
    Notification.objects.all().delete()
    Request.objects.all().delete()
    Log.objects.all().delete()
    TimeInterval.objects.all().delete()
    TaskUser.objects.all().delete()
    Task.objects.all().delete()
    ProjectUser.objects.all().delete()
    Project.objects.all().delete()
    User.objects.all().delete()
    Priority.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("pscds", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(create_initial_data, reverse_initial_data),
    ]
