# Generated by Django 5.2.6 on 2025-09-27 09:10

from django.db import migrations
from datetime import datetime, timedelta, time
from django.utils import timezone
import random



def gen_timeintervals(apps, schema_editor):
    User = apps.get_model("pscds", "User")
    ProjectUser = apps.get_model("pscds", "ProjectUser")
    Task = apps.get_model("pscds", "Task")
    TimeInterval = apps.get_model("pscds", "TimeInterval")

    # Delete all TimeIntervals
    TimeInterval.objects.all().delete()

    # For each ProjectUser, assign TimeIntervals for their tasks
    for pu in ProjectUser.objects.all():
        user = pu.user
        project = pu.project
        # Get all tasks for this project
        tasks = Task.objects.filter(project=project)
        if not tasks.exists():
            continue
        # For each day in the last 3 working days
        for day_offset in range(3, 0, -1):
            work_date = timezone.now().date() - timedelta(days=day_offset)
            # Two work sessions: 8:00-12:00 and 13:00-17:00
            sessions = [(time(8,0), time(12,0)), (time(13,0), time(17,0))]
            for session_start, session_end in sessions:
                current = datetime.combine(work_date, session_start)
                end = datetime.combine(work_date, session_end)
                while current < end:
                    # Assign a random task from this project to this user
                    task = tasks.order_by("?").first()
                    # Each interval is 30 minutes
                    interval_start = timezone.make_aware(current)
                    interval_end = timezone.make_aware(current + timedelta(minutes=30))
                    TimeInterval.objects.create(
                        task=task,
                        user=user,
                        start_at=interval_start,
                        end_at=interval_end,
                        different_timezone=False,
                        is_manual=False,
                        activity_fill=random.randint(0, 100),
                        mouse_fill=random.randint(0, 100),
                        keyboard_fill=random.randint(0, 100),
                        job="Working on task",
                        notes="Auto-generated interval",
                        status=1,
                    )
                    current += timedelta(minutes=30)

class Migration(migrations.Migration):

    dependencies = [
        ("pscds", "0002_auto_20250927_0448"),
    ]

    operations = [
        migrations.RunPython(gen_timeintervals),
    ]


