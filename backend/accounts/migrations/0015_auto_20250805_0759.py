# Generated by Django 5.2.1 on 2025-08-05 07:53

from django.db import migrations
from datetime import datetime, timedelta
import pytz
import random


def create_report_time_records(apps, schema_editor):
    User = apps.get_model('accounts', 'User')
    ReportTime = apps.get_model('accounts', 'ReportTime')
    
    # Get all users
    users = User.objects.all()
    
    # Set timezone to Vietnam
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    
    # Create report time records for each user
    for user in users:
        # Generate data for 6 months (180 days)
        for day in range(180):
            # Calculate the date (starting from 180 days ago)
            date = datetime.now(tz) - timedelta(days=180-day)
            
            # Skip weekends (Saturday = 5, Sunday = 6)
            if date.weekday() >= 5:
                continue
            
            # Randomly skip 1-2 days per month to simulate absences
            month_key = f"{date.year}-{date.month}"
            if not hasattr(create_report_time_records, 'skipped_days'):
                create_report_time_records.skipped_days = {}
            
            if month_key not in create_report_time_records.skipped_days:
                # Randomly choose 1-2 days to skip in this month
                days_in_month = (date.replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
                days_in_month = days_in_month.day
                skip_count = random.randint(1, 2)
                skip_days = random.sample(range(1, days_in_month + 1), skip_count)
                create_report_time_records.skipped_days[month_key] = skip_days
            
            # Skip if this day is in the skipped days list
            if date.day in create_report_time_records.skipped_days[month_key]:
                continue
            
            # Randomize work hours slightly (8-9 hours)
            work_hours = random.uniform(8.0, 9.0)
            start_hour = random.randint(8, 9)  # Start between 8-9 AM
            start_minute = random.randint(0, 30)  # Random minutes
            
            # Calculate end time based on work hours
            start_time = date.replace(hour=start_hour, minute=start_minute, second=0, microsecond=0)
            end_time = start_time + timedelta(hours=work_hours)
            
            # Create the report time record
            ReportTime.objects.create(
                user=user,
                start_time=start_time,
                end_time=end_time,
                duration=work_hours,
                description=f"Làm việc ngày {date.strftime('%d/%m/%Y')} - Ca từ {start_time.strftime('%H:%M')} đến {end_time.strftime('%H:%M')}"
            )


def reverse_create_report_time_records(apps, schema_editor):
    ReportTime = apps.get_model('accounts', 'ReportTime')
    
    # Delete all report time records created by this migration
    # We can identify them by the description pattern
    ReportTime.objects.filter(
        description__startswith="Làm việc ngày"
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0014_reporttime"),
    ]

    operations = [
        migrations.RunPython(create_report_time_records, reverse_create_report_time_records),
    ]
