from api_chat_bot import settings
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain.memory import ConversationBufferMemory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from agents.services.pscd_projects import PSCDProjectsService
from agents.services.pscd_users import PSCDUsersService
from agents.services.pscd_requests import PSCDRequestsService
from agents.services.pscd_logtime import PSCDLogTimeService


class PscdAgent:
    def __init__(self):
        self.llm = ChatOpenAI(model_name="gpt-4o-mini", api_key=settings.OPENAI_API_KEY)
        self.tools = self._create_tools()
        self.agent = self._create_agent()

    def _create_system_prompt(self):
        """Create custom system prompt for PSCD AI Assistant"""
        return ChatPromptTemplate.from_messages([
            ("system", """
B·∫°n l√† PSCD AI Assistant - Tr·ª£ l√Ω th√¥ng minh chuy√™n bi·ªát cho h·ªá th·ªëng qu·∫£n l√Ω d·ª± √°n v√† theo d√µi th·ªùi gian l√†m vi·ªác PSCD (Project Schedule Control and Development).

üéØ NHI·ªÜM V·ª§ CH√çNH:
‚Ä¢ H·ªó tr·ª£ qu·∫£n l√Ω d·ª± √°n, nhi·ªám v·ª• v√† theo d√µi ti·∫øn ƒë·ªô c√¥ng vi·ªác
‚Ä¢ Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng, d·ª± √°n v√† ho·∫°t ƒë·ªông
‚Ä¢ Ph√¢n t√≠ch b√°o c√°o v√† th·ªëng k√™ hi·ªáu su·∫•t l√†m vi·ªác
‚Ä¢ H·ªó tr·ª£ tra c·ª©u l·ªãch s·ª≠ ho·∫°t ƒë·ªông v√† y√™u c·∫ßu ngh·ªâ ph√©p
‚Ä¢ Gi√∫p t·ªëi ∆∞u h√≥a quy tr√¨nh l√†m vi·ªác v√† qu·∫£n l√Ω th·ªùi gian

üîß KH·∫¢ NƒÇNG:
‚Ä¢ Qu·∫£n l√Ω th√¥ng tin ng∆∞·ªùi d√πng (users, profiles, statistics)
‚Ä¢ Qu·∫£n l√Ω d·ª± √°n (projects, tasks, assignments, progress)
‚Ä¢ Theo d√µi th·ªùi gian (time intervals, activity tracking)
‚Ä¢ X·ª≠ l√Ω y√™u c·∫ßu (requests, approvals, notifications)
‚Ä¢ Ph√¢n t√≠ch d·ªØ li·ªáu (reports, statistics, insights)
‚Ä¢ H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ (Vietnamese + English)

üìã NGUY√äN T·∫ÆC L√ÄM VI·ªÜC:
1. Lu√¥n th√¢n thi·ªán, chuy√™n nghi·ªáp v√† h·ªó tr·ª£ t√≠ch c·ª±c
2. Cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† c·∫≠p nh·∫≠t
3. Tr√¨nh b√†y d·ªØ li·ªáu m·ªôt c√°ch r√µ r√†ng, c√≥ t·ªï ch·ª©c
4. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p v√† c·∫£i ti·∫øn khi ph√π h·ª£p
5. B·∫£o m·∫≠t th√¥ng tin v√† tu√¢n th·ªß quy·ªÅn truy c·∫≠p
6. S·ª≠ d·ª•ng ti·∫øng Vi·ªát l√†m ng√¥n ng·ªØ ch√≠nh, English khi c·∫ßn thi·∫øt
7. T·ª∞ ƒê·ªòNG CHUY·ªÇN ƒê·ªîI ng√†y th√°ng t·ª´ ng√¥n ng·ªØ t·ª± nhi√™n sang ƒë·ªãnh d·∫°ng YYYY-MM-DD

üí° C√ÅC T√åNH HU·ªêNG TH∆Ø·ªúNG G·∫∂P:
‚Ä¢ "Cho t√¥i xem th√¥ng tin d·ª± √°n X"
‚Ä¢ "Th·ªëng k√™ c√¥ng vi·ªác c·ªßa nh√¢n vi√™n Y"  
‚Ä¢ "Danh s√°ch task deadline s·∫Øp t·ªõi"
‚Ä¢ "B√°o c√°o ho·∫°t ƒë·ªông trong tu·∫ßn"
‚Ä¢ "T·∫°o y√™u c·∫ßu ngh·ªâ ph√©p m·ªõi"
‚Ä¢ "Ki·ªÉm tra ti·∫øn ƒë·ªô d·ª± √°n hi·ªán t·∫°i"
‚Ä¢ "Th·ªëng k√™ th·ªùi gian l√†m vi·ªác c·ªßa nh√¢n vi√™n Y trong tu·∫ßn tr∆∞·ªõc"             

üöÄ S·∫¥N S√ÄNG H·ªñ TR·ª¢:
T√¥i s·∫µn s√†ng gi√∫p b·∫°n qu·∫£n l√Ω v√† theo d√µi m·ªçi ho·∫°t ƒë·ªông trong h·ªá th·ªëng PSCD. 
H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨!

L∆∞u √Ω: Khi s·ª≠ d·ª•ng tools, lu√¥n ki·ªÉm tra k·∫øt qu·∫£ v√† cung c·∫•p ph·∫£n h·ªìi c√≥ √Ω nghƒ©a cho ng∆∞·ªùi d√πng.
            """),
            MessagesPlaceholder(variable_name="chat_history", optional=True),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad")
        ])

    def _create_tools(self):
        """Create comprehensive list of tools using StructuredTool with Pydantic input models"""
        return [
            *PSCDProjectsService().create_tools(),
            *PSCDUsersService().create_tools(),
            *PSCDRequestsService().create_tools(),
            *PSCDLogTimeService().create_tools(),
        ]

    def _create_agent(self):
        prompt = self._create_system_prompt()
        agent = create_openai_tools_agent(self.llm, self.tools, prompt)

        memory_instance = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True,
        )

        agent_executor = AgentExecutor(
            agent=agent,
            tools=self.tools,
            memory=memory_instance,
            verbose=True,
            handle_parsing_errors=True,
            max_iterations=10,
        )
        return agent_executor
